{
  "version": 3,
  "sources": ["../../vuetify/src/directives/mutate/index.ts", "../../vuetify/src/directives/resize/index.ts", "../../vuetify/src/directives/scroll/index.ts"],
  "sourcesContent": ["// Types\nimport type { DirectiveBinding } from 'vue'\nimport type { MutationOptions } from '@/composables/mutationObserver'\n\nexport interface MutationDirectiveBinding extends Omit<DirectiveBinding, 'modifiers' | 'value'> {\n  value: MutationCallback | { handler: MutationCallback, options?: MutationObserverInit }\n  modifiers: MutationOptions\n}\n\nfunction mounted (el: HTMLElement, binding: MutationDirectiveBinding) {\n  const modifiers = binding.modifiers || {}\n  const value = binding.value\n  const { once, immediate, ...modifierKeys } = modifiers\n  const defaultValue = !Object.keys(modifierKeys).length\n\n  const { handler, options } = typeof value === 'object'\n    ? value\n    : {\n      handler: value,\n      options: {\n        attributes: modifierKeys?.attr ?? defaultValue,\n        characterData: modifierKeys?.char ?? defaultValue,\n        childList: modifierKeys?.child ?? defaultValue,\n        subtree: modifierKeys?.sub ?? defaultValue,\n      },\n    }\n\n  const observer = new MutationObserver((\n    mutations: MutationRecord[] = [],\n    observer: MutationObserver\n  ) => {\n    handler?.(mutations, observer)\n\n    if (once) unmounted(el, binding)\n  })\n\n  if (immediate) handler?.([], observer)\n\n  el._mutate = Object(el._mutate)\n  el._mutate![binding.instance!.$.uid] = { observer }\n\n  observer.observe(el, options)\n}\n\nfunction unmounted (el: HTMLElement, binding: MutationDirectiveBinding) {\n  if (!el._mutate?.[binding.instance!.$.uid]) return\n\n  el._mutate[binding.instance!.$.uid]!.observer.disconnect()\n  delete el._mutate[binding.instance!.$.uid]\n}\n\nexport const Mutate = {\n  mounted,\n  unmounted,\n}\n\nexport default Mutate\n", "import type { DirectiveBinding } from 'vue'\n\ninterface ResizeDirectiveBinding extends Omit<DirectiveBinding, 'modifiers'> {\n  value: () => void\n  modifiers?: {\n    active?: boolean\n    quiet?: boolean\n  }\n}\n\nfunction mounted (el: HTMLElement, binding: ResizeDirectiveBinding) {\n  const handler = binding.value\n  const options: AddEventListenerOptions = {\n    passive: !binding.modifiers?.active,\n  }\n\n  window.addEventListener('resize', handler, options)\n\n  el._onResize = Object(el._onResize)\n  el._onResize![binding.instance!.$.uid] = {\n    handler,\n    options,\n  }\n\n  if (!binding.modifiers?.quiet) {\n    handler()\n  }\n}\n\nfunction unmounted (el: HTMLElement, binding: ResizeDirectiveBinding) {\n  if (!el._onResize?.[binding.instance!.$.uid]) return\n\n  const { handler, options } = el._onResize[binding.instance!.$.uid]!\n\n  window.removeEventListener('resize', handler, options)\n\n  delete el._onResize[binding.instance!.$.uid]\n}\n\nexport const Resize = {\n  mounted,\n  unmounted,\n}\n\nexport default Resize\n", "import type { DirectiveBinding } from 'vue'\n\ninterface ScrollDirectiveBinding extends Omit<DirectiveBinding, 'modifiers'> {\n  value: EventListener | {\n    handler: EventListener\n    options?: AddEventListenerOptions\n  } | EventListenerObject & { options?: AddEventListenerOptions }\n  modifiers?: {\n    self?: boolean\n  }\n}\n\nfunction mounted (el: HTMLElement, binding: ScrollDirectiveBinding) {\n  const { self = false } = binding.modifiers ?? {}\n  const value = binding.value\n  const options = (typeof value === 'object' && value.options) || { passive: true }\n  const handler = typeof value === 'function' || 'handleEvent' in value ? value : value.handler\n\n  const target = self\n    ? el\n    : binding.arg\n      ? document.querySelector(binding.arg)\n      : window\n\n  if (!target) return\n\n  target.addEventListener('scroll', handler, options)\n\n  el._onScroll = Object(el._onScroll)\n  el._onScroll![binding.instance!.$.uid] = {\n    handler,\n    options,\n    // Don't reference self\n    target: self ? undefined : target,\n  }\n}\n\nfunction unmounted (el: HTMLElement, binding: ScrollDirectiveBinding) {\n  if (!el._onScroll?.[binding.instance!.$.uid]) return\n\n  const { handler, options, target = el } = el._onScroll[binding.instance!.$.uid]!\n\n  target.removeEventListener('scroll', handler, options)\n  delete el._onScroll[binding.instance!.$.uid]\n}\n\nfunction updated (el: HTMLElement, binding: ScrollDirectiveBinding) {\n  if (binding.value === binding.oldValue) return\n\n  unmounted(el, binding)\n  mounted(el, binding)\n}\n\nexport const Scroll = {\n  mounted,\n  unmounted,\n  updated,\n}\n\nexport default Scroll\n"],
  "mappings": "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",
  "names": ["mounted", "el", "binding", "modifiers", "value", "once", "immediate", "modifierKeys", "defaultValue", "Object", "keys", "length", "handler", "options", "attributes", "attr", "characterData", "char", "childList", "child", "subtree", "sub", "observer", "MutationObserver", "mutations", "unmounted", "_mutate", "instance", "$", "uid", "observe", "disconnect", "Mutate", "mounted", "el", "binding", "handler", "value", "options", "passive", "modifiers", "active", "window", "addEventListener", "_onResize", "Object", "instance", "$", "uid", "quiet", "unmounted", "removeEventListener", "Resize", "mounted", "el", "binding", "self", "modifiers", "value", "options", "passive", "handler", "target", "arg", "document", "querySelector", "window", "addEventListener", "_onScroll", "Object", "instance", "$", "uid", "undefined", "unmounted", "removeEventListener", "updated", "oldValue", "Scroll"]
}
